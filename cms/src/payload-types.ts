/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'site-settings': SiteSetting;
    navigation: Navigation;
    footer: Footer;
    'club-info': ClubInfo;
    sponsors: Sponsor;
  };
  globalsSelect: {
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
    navigation: NavigationSelect<false> | NavigationSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'club-info': ClubInfoSelect<false> | ClubInfoSelect<true>;
    sponsors: SponsorsSelect<false> | SponsorsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  /**
   * URL-friendly version of the title
   */
  slug: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  status: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * General site configuration and metadata
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: string;
  /**
   * The name of your website
   */
  siteName: string;
  /**
   * Site tagline or slogan
   */
  tagline?: string | null;
  /**
   * Main logo displayed in header
   */
  logo: string | Media;
  /**
   * Browser tab icon (32x32 or 16x16)
   */
  favicon?: (string | null) | Media;
  /**
   * Default title for search engines
   */
  seoTitle?: string | null;
  /**
   * Default description for search engines (150-160 characters)
   */
  seoDescription?: string | null;
  /**
   * Default image for social media sharing (1200x630)
   */
  seoImage?: (string | null) | Media;
  /**
   * GA tracking ID (e.g., G-XXXXXXXXXX)
   */
  googleAnalyticsId?: string | null;
  /**
   * When enabled, the site will show a maintenance message
   */
  maintenanceMode?: boolean | null;
  /**
   * Message to display during maintenance
   */
  maintenanceMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Main navigation menu structure
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation".
 */
export interface Navigation {
  id: string;
  /**
   * Main navigation items
   */
  mainMenu: {
    label: string;
    type: 'internal' | 'external' | 'dropdown';
    /**
     * External URL (e.g., https://example.com)
     */
    url?: string | null;
    /**
     * Select an internal page
     */
    page?: (string | null) | Page;
    /**
     * Dropdown menu items
     */
    submenu?:
      | {
          label: string;
          type: 'internal' | 'external';
          /**
           * External URL
           */
          url?: string | null;
          /**
           * Select an internal page
           */
          page?: (string | null) | Page;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  /**
   * Header quick links (e.g., Login, Contact)
   */
  quickLinks?:
    | {
        label: string;
        url: string;
        /**
         * Optional icon class (e.g., fa-user)
         */
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Footer content and structure
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Footer column sections
   */
  sections: {
    title: string;
    links: {
      label: string;
      type: 'internal' | 'external';
      url?: string | null;
      page?: (string | null) | Page;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  /**
   * Social media profiles
   */
  socialLinks: {
    platform: 'facebook' | 'twitter' | 'instagram' | 'youtube' | 'tiktok' | 'linkedin';
    url: string;
    /**
     * Optional custom icon class
     */
    icon?: string | null;
    id?: string | null;
  }[];
  newsletterEnabled?: boolean | null;
  newsletterTitle?: string | null;
  newsletterDescription?: string | null;
  appLinks?: {
    /**
     * Link to iOS app
     */
    iosUrl?: string | null;
    /**
     * Link to Android app
     */
    androidUrl?: string | null;
  };
  /**
   * Use {year} for current year
   */
  copyrightText: string;
  /**
   * Privacy, Terms, etc.
   */
  legalLinks?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Club information, history, and stadium details
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "club-info".
 */
export interface ClubInfo {
  id: string;
  clubName: string;
  /**
   * Year the club was established
   */
  founded: number;
  /**
   * e.g., "The Lions", "The Eagles"
   */
  nickname?: string | null;
  /**
   * Club slogan or motto
   */
  motto?: string | null;
  colors?: {
    /**
     * Hex code (e.g., #FF0000)
     */
    primary?: string | null;
    /**
     * Hex code (e.g., #FFFFFF)
     */
    secondary?: string | null;
  };
  /**
   * About the club content
   */
  aboutUs: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Detailed club history
   */
  history?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Club vision for the future
   */
  vision?: string | null;
  /**
   * Club mission and purpose
   */
  mission?: string | null;
  /**
   * Club core values
   */
  values?:
    | {
        title: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Trophies and major achievements
   */
  achievements?:
    | {
        year: number;
        title: string;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  stadium: {
    name: string;
    /**
     * Total seating capacity
     */
    capacity: number;
    address: string;
    /**
     * For map display
     *
     * @minItems 2
     * @maxItems 2
     */
    coordinates?: [number, number] | null;
    image?: (string | null) | Media;
    /**
     * History and features of the stadium
     */
    description?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  contact: {
    email: string;
    phone: string;
    address: string;
    /**
     * e.g., Mon-Fri 9AM-5PM
     */
    businessHours?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Manage club sponsors and partners
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sponsors".
 */
export interface Sponsor {
  id: string;
  /**
   * Primary/Title sponsor
   */
  mainSponsor: {
    name: string;
    /**
     * Sponsor logo image
     */
    logo: string | Media;
    /**
     * Sponsor website URL
     */
    website?: string | null;
    /**
     * Year partnership started
     */
    since?: number | null;
  };
  /**
   * Kit/Jersey sponsor
   */
  kitSponsor: {
    name: string;
    logo: string | Media;
    website?: string | null;
    since?: number | null;
  };
  /**
   * Other official partners and sponsors
   */
  officialPartners?:
    | {
        name: string;
        logo: string | Media;
        website?: string | null;
        category?: ('official' | 'technical' | 'media' | 'regional' | 'community' | 'other') | null;
        /**
         * Order of display (lower numbers appear first)
         */
        order?: number | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  siteName?: T;
  tagline?: T;
  logo?: T;
  favicon?: T;
  seoTitle?: T;
  seoDescription?: T;
  seoImage?: T;
  googleAnalyticsId?: T;
  maintenanceMode?: T;
  maintenanceMessage?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigation_select".
 */
export interface NavigationSelect<T extends boolean = true> {
  mainMenu?:
    | T
    | {
        label?: T;
        type?: T;
        url?: T;
        page?: T;
        submenu?:
          | T
          | {
              label?: T;
              type?: T;
              url?: T;
              page?: T;
              id?: T;
            };
        id?: T;
      };
  quickLinks?:
    | T
    | {
        label?: T;
        url?: T;
        icon?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  sections?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              label?: T;
              type?: T;
              url?: T;
              page?: T;
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        icon?: T;
        id?: T;
      };
  newsletterEnabled?: T;
  newsletterTitle?: T;
  newsletterDescription?: T;
  appLinks?:
    | T
    | {
        iosUrl?: T;
        androidUrl?: T;
      };
  copyrightText?: T;
  legalLinks?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "club-info_select".
 */
export interface ClubInfoSelect<T extends boolean = true> {
  clubName?: T;
  founded?: T;
  nickname?: T;
  motto?: T;
  colors?:
    | T
    | {
        primary?: T;
        secondary?: T;
      };
  aboutUs?: T;
  history?: T;
  vision?: T;
  mission?: T;
  values?:
    | T
    | {
        title?: T;
        description?: T;
        id?: T;
      };
  achievements?:
    | T
    | {
        year?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  stadium?:
    | T
    | {
        name?: T;
        capacity?: T;
        address?: T;
        coordinates?: T;
        image?: T;
        description?: T;
      };
  contact?:
    | T
    | {
        email?: T;
        phone?: T;
        address?: T;
        businessHours?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sponsors_select".
 */
export interface SponsorsSelect<T extends boolean = true> {
  mainSponsor?:
    | T
    | {
        name?: T;
        logo?: T;
        website?: T;
        since?: T;
      };
  kitSponsor?:
    | T
    | {
        name?: T;
        logo?: T;
        website?: T;
        since?: T;
      };
  officialPartners?:
    | T
    | {
        name?: T;
        logo?: T;
        website?: T;
        category?: T;
        order?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}