---
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import "../styles/index.css";

export interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Motherland Berlin SC - Official Website",
  description = "Welcome to Motherland Berlin SC official website. Get the latest news, fixtures, tickets, and exclusive content.",
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />

    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="48x48" href="/favicon-48x48.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link
      rel="icon"
      type="image/png"
      sizes="192x192"
      href="/android-chrome-192x192.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="512x512"
      href="/android-chrome-512x512.png"
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <title>{title}</title>
  </head>
  <body class="flex min-h-screen flex-col bg-black text-white">
    <Navbar />

    <main class="flex-grow">
      <slot />
    </main>

    <Footer />

    <script>
      // Global scroll animations using Intersection Observer
      function initScrollAnimations() {
        const observerOptions = {
          threshold: 0.1,
          rootMargin: "0px 0px -50px 0px",
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("in-view");
            }
          });
        }, observerOptions);

        // Observe all elements with scroll-animate class
        const animatedElements = document.querySelectorAll(".scroll-animate");
        animatedElements.forEach((el) => observer.observe(el));
      }

      // Initialize when DOM is ready
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initScrollAnimations);
      } else {
        initScrollAnimations();
      }
    </script>
  </body>
</html>
